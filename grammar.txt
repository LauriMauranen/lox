program -> declaration* EOF
declaration -> classDecl | funDecl | varDecl | statement
classDecl -> "class" IDENTIFIER ("<" IDENTIFIER)? "{" function* "}"
funDecl -> "fun" function
function -> IDENTIFIER "(" parameters? ")" block
parameters -> IDENTIFIER ("," IDENTIFIER)*
varDecl -> "var" IDENTIFIER ("=" expression)? ";"
statement -> exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | breakStmt | block
exprStmt -> expression ";"
forStmt -> "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement
ifStmt -> "if" "(" expression ")" statement ("else" statement)?
printStmt -> "print" expression ";"
returnStmt -> "return" expression? ";"
whileStmt -> "while" "(" expression ")" statement
breakStmt -> "break" ";"
block -> "{" declaration* "}"
expression -> comma
comma -> assignment ("," assignment)*
assignment -> (( call "." )? IDENTIFIER "=" assignment) | anonymous_function | logic_or
anonymous_function -> "fun" "(" parameters? ")" block
logic_or -> logic_and ("or" logic_and)*
logic_and -> ternary ("and" ternary)*
ternary -> equality ("?" equality ":" equality)
equality -> comparison (("==" | "!=") comparison)*
comparison -> term (("<" | ">" | "<=" | ">=") term)*
term -> factor (("+" | "-") factor)*
factor -> unary (("*" | "/") unary)*
unary -> ("!" | "-") unary | call
call -> primary ("(" arguments? ")" | "." IDENTIFIER)*
arguments -> assignment ("," assignment)*
primary -> NUMBER | STRING | "true" | "false" | "nil" | "this" | "(" expression ")" | IDENTIFIER | "super" "." IDENTIFIER
